// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);

    Not(in=instruction[15], out=isA);
    Or(a=isA, b=instruction[5], out=loadA);
    ARegister(in=outMux1, load=loadA, out=outA, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[12], out=loadFromM);
    Mux16(a=outA, b=inM, sel=loadFromM, out=aOrM);

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);


    ALU(x=outD, y=aOrM, no=instruction[6], f=instruction[7], ny=instruction[8], zy=instruction[9], nx=instruction[10], zx=instruction[11], out=outALU, out=outM, zr=zr, ng=ng);

    //writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    //JUMP/PC
    DMux8Way(in=true, sel=instruction[0..2], a=njmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    Mux(a=false, b=true, sel=jmp, out=l1);

    Or(a=zr, b=ng, out=LE);
    Mux(a=l1, b=LE, sel=jle, out=l2);

    Not(in=zr, out=nzr);
    Mux(a=l2, b=nzr, sel=jne, out=l3);

    Mux(a=l3, b=ng, sel=jlt, out=l4);

    Not(in=ng, out=nng);
    Mux(a=l4, b=nng, sel=jge, out=l5);

    Mux(a=l5, b=zr, sel=jeq, out=l6);

    Not(in=LE, out=GT);
    Mux(a=l6, b=GT, sel=jgt, out=l7);

    Mux(a=l7, b=false, sel=njmp, out=l8);

    Mux(a=false, b=l8, sel=instruction[15], out=pcLoad);

    PC(in=outA, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);



}